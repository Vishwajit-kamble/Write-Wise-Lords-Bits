// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  REVIEWER
  FACULTY
  ADMIN
}

enum EssayStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  REVIEWED
  GRADED
}

enum ReviewStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum NotificationType {
  ESSAY_ASSIGNED
  REVIEW_COMPLETED
  FEEDBACK_READY
  DEADLINE_REMINDER
  GRADE_AVAILABLE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole @default(STUDENT)
  avatar    String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authoredEssays Essay[]
  reviews         Review[]
  courses         Course[] @relation("CourseInstructor")
  enrolledCourses Course[] @relation("CourseStudents")
  notifications   Notification[]
  analytics       Analytics[]

  @@map("users")
}

model Essay {
  id          String      @id @default(cuid())
  title       String
  content     String
  authorId    String
  status      EssayStatus @default(DRAFT)
  wordCount   Int         @default(0)
  readingTime Int         @default(0)
  version     Int         @default(1)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  submittedAt DateTime?
  dueDate     DateTime?
  courseId    String?

  // Relations
  author     User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  course     Course?      @relation(fields: [courseId], references: [id])
  reviews    Review[]
  aiFeedback AIFeedback?

  @@map("essays")
}

model Review {
  id          String       @id @default(cuid())
  essayId     String
  reviewerId  String
  status      ReviewStatus @default(ASSIGNED)
  scores      Json         // ReviewScores as JSON
  feedback    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  completedAt DateTime?

  // Relations
  essay    Essay           @relation(fields: [essayId], references: [id], onDelete: Cascade)
  reviewer User            @relation(fields: [reviewerId], references: [id])
  comments ReviewComment[]

  @@map("reviews")
}

model ReviewComment {
  id       String @id @default(cuid())
  reviewId String
  text     String
  position Json   // { start: number, end: number }
  type     String // 'suggestion' | 'question' | 'praise' | 'concern'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("review_comments")
}

model AIFeedback {
  id        String   @id @default(cuid())
  essayId   String   @unique
  scores    Json     // ReviewScores as JSON
  suggestions Json   // AISuggestion[] as JSON
  summary   String
  createdAt DateTime @default(now())

  // Relations
  essay Essay @relation(fields: [essayId], references: [id], onDelete: Cascade)

  @@map("ai_feedback")
}

model Course {
  id          String   @id @default(cuid())
  name        String
  description String?
  instructorId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  instructor User   @relation("CourseInstructor", fields: [instructorId], references: [id])
  students   User[] @relation("CourseStudents")
  essays     Essay[]

  @@map("courses")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  actionUrl String?
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Analytics {
  id        String   @id @default(cuid())
  userId    String
  data      Json     // Analytics data as JSON
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analytics")
}

model SystemSettings {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}
